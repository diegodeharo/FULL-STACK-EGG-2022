comillas grandes en Java por teclado en W10
“ <-apertura -> alt+0147
” <-cierre   -> alt+0148

1_ declaracion de variables
tipo de dato - nombre de la variable;

2_asignación
variable= expresión;

3_asignacion con declaracion de variable
tipode de dato-variable= expresión;

instanciar->crear un objeto de una clase en especifico 

4_Operadores
	a_unitarios
	b_aritmeticos
	c_los de bit	
	d_relacionales
	e_boleanos
	f_operador de asignación
cuando dos operadores poseen el mismo nivel de prioridad, se evalúa de 
izquierda a derecha

5_operadores unitarios

+ -> operador unario de suma; indica que el valor es positivo
- -> operador unario de resta; indica qu el valor es negativo
++ -> operador de incremento
-- -> operador de decremento

6_operador de igualdad y relación

== -> igual
!= -> distinto
> -> mayor que
>= -> mayor o igual que
< -> menor que 
<= -> menor o igual que

7_Escritura en Java

a_con saltos de linea 'ln'
System.out.println(" aca se escribe"); -> para mostrar en pantalla
system.out.println(" aca se escribe: " + variable); -> aca se muestra el mensaje mas el valor de una variable

b_sin saltos de linea

System.out.print("aca se escribe");
System.out.print(“aca se escribe”);

******************************************************************************************************************
** PARA TENER MUY EN CUENTA, A LA HORA DE USAR A "STRING" COMO UNA TIPO DE DATO DENTRO DE METODO MAIN	        **
** AL COLOCAR CON MAYUSCULA LA "S" QUEDANDO -> String -> me indica que voy a declarar una cadena de caracteres  **
** ahora cuando uso - string - todo en minuscula, eso me da lugar a crear una nueva clase, ya sea dentro del    **
** metodo donde estoy o una aparta.									        **
******************************************************************************************************************

8_Lectura o Entradas en Java

MANERA CORRECTA DE CREAR EL "Scanner"-> es una clase utilizada para obtener la entrada de los tipos primitivos
como int, double, etc.

Debemos crear el Scanner

Scanner leer= new Scanner (System.in);

se debe importar esta clase debajo del package
import java.util.Scanner; // Este es el importe de la clase Scanner

a_ leer valores
nexT() -> Función que Sirve para valores numericos
nexInt() -> para leer un valor de tipo entero
nextDouble() -> leer un valor de tipo double
nextLine() -> leer un String (cadena)

9_forma de ingresar un valor

a_usarlo cuando definimos la variable
int num= leer.nextInt();

b_podemos usarlo con una variable pre definida
int numero;
numero= leer.nextInt();

10_instrucciones de Bifurcación

. Las bifurcaciones 
o al flujo de un programa puede ser según el punto del programa en el que se ejecuta la 
instrucción hacia adelante o hacia atrás. De esto se encargan las estructuras de control.

a_ Operadores Condicionales

&& -> AND
|| -> OR
!  -> Operador Lógico de Negación

11_ Estructuras de control: condicionales IF/ELSE

a_
if(condición){

	sentencias
}

En donde, <condición> es una expresión condicional cuyo resultado luego de la evaluación es un 
dato booleano(lógico) verdadero o falso.

b_ en caso de que la condición no se cumpla y se quiera ejecutar otro bloque de código

if(condición){

	sentencias A

} else {

	sentencia B	

}

c_ En muchas ocasiones, se anidan estructuras alternativas if-else, de forma que se pregunte por una 
condición si anteriormente no se ha cumplido otra y así sucesivamente.

if(condición 1){

	sentencia A

} else if (condición 2){

	sentencias B

} else {

	sentencia c

}

12_switch-> estructura de control. condicional

switch(variable){
case(valor 1):
	sentencias_1
	break;
case(valor 2):
	sentencias_2
	break;
.
.
case(valor n):
	sentencias_n
	break;
default:
	sentencia_5;
}

*******************************************************************
*para hacer una linea abajo se coloca \n
* "La bomba es una bomba de \n" +
* "        *hormigón"
********************************************************************

13_ estructura While

while(condicion){

	sentencias

}

14_estructura do-while

do{
   sentencias
} while (condicion);

15_ estructura For

for (inicializacion de la variable; terminacion; incremento o decremento){
	sentencias
}

14_ Funciones y subprocesos
subproceso-> procedimientos o funciones

una funcion puede o no devolver un valor
una funcion tambiien es llamda un metodo, como el metodo main

en java vamos para Funcion vamos a ASIGNAR
	* un TIPO DE ACCESO ej-> publico o privado
	* un Modificador    ej-> static
(repasar de la guia en la parte del "metodo main")

como se declara una Funcion: recordar que es fuera del main

[acceso][modificador][tipo de dato] nombre de la funcion ([tipo de dato]nombre_de_Argumento,.......){
/*	
	bloque de instrucciones;
*/
return valor;
}